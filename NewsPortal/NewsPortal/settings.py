"""
Django settings for NewsPortal project.

Generated by 'django-admin startproject' using Django 4.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-@g7k=f4*$jpf%m=jldyzqf8q(w4uvm^mnp!%$xv7e-z3pd9957'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # Добавили новое App, в котором будем реализовывать модели Джанго
    'news',
    # подключаем ещё приложения
    'django.contrib.sites',
    'django.contrib.flatpages',
    'fpages',
    'django_filters',

    "django_apscheduler",
    # В установленных приложениях необходимо убедиться в наличии некоторых встроенных приложений Django,
    # которые добавляют:
    #
    # пользователей — 'django.contrib.auth'
    # сообщения — 'django.contrib.messages'
    # настройки сайта — 'django.contrib.sites'

    # В данный раздел добавьте 3 обязательных приложения allauth
    # и одно, которое отвечает за выход через Yandex
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.yandex',
]
SITE_ID = 1

# По умолчанию после входа Django пытается перенаправить нас на страницу профиля, который не существует.
#
# Давайте настроим проект так, чтобы после входа нас перенаправляло на список товаров.
# Для этого в настройках можно указать путь в переменной LOGIN_REDIRECT_URL
LOGIN_REDIRECT_URL = "/news"
# LOGOUT_REDIRECT_URL = "/accounts/signup"
LOGOUT_REDIRECT_URL = "/news"
# В файл настроек проекта мы внесём дополнительные параметры,
# в которых укажем обязательные и необязательные поля.
# Обязательность полей остаётся на усмотрение разработчика.
# В нашем случае мы укажем следующую комбинацию параметров:
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_AUTHENTICATION_METHOD = 'email'
ACCOUNT_EMAIL_VERIFICATION = 'none'

ACCOUNT_FORMS = {"signup": "accounts.forms.CustomSignupForm"}


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.contrib.flatpages.middleware.FlatpageFallbackMiddleware',
]

ROOT_URLCONF = 'NewsPortal.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                # `allauth` обязательно нужен этот процессор
                'django.template.context_processors.request',
            ],
        },
    },
]

# Этого раздела может не быть, добавьте его в указанном виде.
AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
]

WSGI_APPLICATION = 'NewsPortal.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

# TIME_ZONE = 'UTC'
TIME_ZONE = 'Asia/Krasnoyarsk'
USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

STATICFILES_DIRS = [
    BASE_DIR / "static"
]
# блок кода настроек нашего проекта работы с Yandex-почтой

# EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
EMAIL_HOST = 'smtp.yandex.ru'
EMAIL_PORT = 465
EMAIL_HOST_USER = "dan-artemov"
EMAIL_HOST_PASSWORD = "nvwxchkbirvcujvm"
EMAIL_USE_TLS = False
EMAIL_USE_SSL = True

DEFAULT_FROM_EMAIL = "dan-artemov@yandex.ru"

SERVER_EMAIL = "dan-artemov@yandex.ru"
MANAGERS = (
    ('Ivan', 'dan-artemov@yandex.ru'),
    ('Petr', 'dan-artemov@yandex.ru'),
)
ADMINS = (
    ('anton', 'dan-artemov@yandex.ru'),
)
# CELERY_BROKER_URL — указывает на URL брокера сообщений (Redis). По умолчанию он находится на порту 6379.
# CELERY_RESULT_BACKEND — указывает на хранилище результатов выполнения задач.
# CELERY_ACCEPT_CONTENT — допустимый формат данных.
# CELERY_TASK_SERIALIZER — метод сериализации задач.
# CELERY_RESULT_SERIALIZER — метод сериализации результатов
# Если вы используете Redis Labs, то переменные CELERY_BROKER_URL и CELERY_RESULT_BACKEND должны строиться по шаблону:
#
# redis://default:iSiPVzkDinwSHJcCw9aWosNG98TOekxQ@redis-10854.c91.us-east-1-3.ec2.cloud.redislabs.com:10854

CELERY_BROKER_URL = 'redis://default:iSiPVzkDinwSHJcCw9aWosNG98TOekxQ@redis-10854.c91.us-east-1-3.ec2.cloud.redislabs.com:10854'
CELERY_RESULT_BACKEND = 'redis://default:iSiPVzkDinwSHJcCw9aWosNG98TOekxQ@redis-10854.c91.us-east-1-3.ec2.cloud.redislabs.com:10854'
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
broker_connection_retry_on_startup = True


# Celery с версией выше 4+ не поддерживается Windows.
# Поэтому если у вас версия Python 3.10 и выше, запускайте Celery, добавив в команду флаг: --polo=solo.
# celery -A NewsPortal worker -l INFO --polo=solo
# celery  -A NewsPortal worker -l INFO --pool=solo
# Для запуска периодических задач на Windows запустите в разных окнах терминала:
#
# celery  -A NewsPortal worker -l INFO --polo=solo
# и
# celery  -A NewsPortal beat -l INFO

CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.filebased.FileBasedCache',
        'LOCATION': os.path.join(BASE_DIR, 'cache_files'),
        # Указываем, куда будем сохранять кэшируемые файлы!
        # Не забываем создать папку cache_files внутри папки с manage.py!
    }
}